{"name":"node-breed","tagline":"Breed is a Helper Module which makes working with types and typeof easy as easy as it should be.","body":"# Breed\r\n\r\nBreed is a Helper Module which makes working with types and typeof easy as easy as it should be.\r\n\r\nYou are even able to extend Breed with [registering your own Classes](#register-your-own-classes-1) and do checks like this:\r\n\r\n```\r\nfunction Person () {}\r\nbreed.register(Person);\r\nbreed.isPerson(new Person()); // true\r\n```\r\n\r\n\r\n##Table of Contents\r\n\r\n\r\n- [Getting Started](#getting-started)\r\n- [Documentation](#documentation)\r\n  - [Basic Supported Types](#basic-supported-types)\r\n  - [is… and isnt…](#is-and-isnt)\r\n  - [is](#is)\r\n  - [Constants](#constants)\r\n  - [Register your own Classes](#register-your-own-classes)\r\n- [Examples](#examples)\r\n  - [Basic Supported Types](#basic-supported-types-1)\r\n  - [Register your own Classes](#register-your-own-classes-1)\r\n- [Contributing](#contributing)\r\n- [Release History](#release-history)\r\n- [License](#license)\r\n\r\n\r\n## Getting Started\r\nInstall the module with: `npm install breed`\r\n\r\n```\r\nvar breed = require('breed');\r\nbreed.isArray([]); // true\r\nbreed.isntArray([]); // false\r\nbreed.is([]) // 'array'\r\nbreed.ARRAY // 'array'\r\n\r\n```\r\n\r\n## Documentation\r\n\r\n### Basic Supported Types\r\n\r\n* Null\r\n* Object\r\n* Array\r\n* Date\r\n* RegExp\r\n* Error\r\n* Number\r\n* Function\r\n* String\r\n* Undefined\r\n* JSON\r\n* Finite\r\n* NaN\r\n* Error\r\n* EvalError\r\n* InternalError\r\n* RangeError\r\n* ReferenceError\r\n* SyntaxError\r\n* TypeError\r\n* URIError\r\n\r\n### is… and isnt...\r\n\r\nBreed always has for every Type 2 Functions:\r\n\r\n```\r\nbreed.is...\r\nbreed.isnt...\r\n```\r\n\r\nfor example:\r\n\r\n```\r\nbreed.isFunction()\r\nbreed.isntFunction()\r\n\r\n// or\r\n\r\nbreed.isUndefined()\r\nbreed.isntUndefined()\r\n\r\n// or\r\n\r\nbreed.isJSON()\r\nbreed.isntJSON()\r\n\r\n// … and so on\r\n```\r\n\r\nThere is 1 exceptional Case where isInfinite is just a little bit nicer than isntFinite, so both Cases are supported:\r\n\r\n```\r\nbreed.isntFinite() === breed.isInfinite()\r\n```\r\n\r\n### is\r\n\r\nYou are also able to check via breed's is-Function which will always return the type as a String:\r\n\r\n```\r\nbreed.is([]) // 'array'\r\nbreed.is(1) // 'number'\r\nbreed.is({}) // 'object'\r\n...\r\n```\r\n\r\n### Constants\r\n\r\nEvery type has its 'Constant' Variable (always uppercase) whos value is always lowercase:\r\n\r\n```\r\nbreed.ARRAY // 'array'\r\nbreed.NUMBER // 'number'\r\nbreed.OBJECT // 'object'\r\n...\r\n```\r\n\r\nSo you can combine it with the is-Function:\r\n\r\n```\r\nbreed.is([]) === breed.ARRAY // true\r\nbreed.is(1) === breed.NUMBER // true\r\nbreed.is({}) === breed.OBJECT // true\r\n...\r\n```\r\n\r\n### Register your own Classes\r\n\r\nJust add as much Classes as you want:\r\n\r\n```\r\nbreed.register(*functions)\r\n```\r\n\r\nThe best about that is, that breed.register even supports Inheritance (see the example: [Register your own Classes](#register-your-own-classes-1))\r\n\r\n\r\n## Examples\r\n\r\n### Basic Supported Types\r\n```\r\n\r\n// some Functions\r\nbreed.isObject({}) // true\r\nbreed.isFunction(function () {}) // true\r\nbreed.isntDate(new Date()) // false\r\nbreed.isntUndefined() // false\r\n\r\n// errors all have the super-constructor Error\r\nbreed.isRangeError(new RangeError()) // true\r\nbreed.isError(new RangeError()) // true\r\n\r\n// some constants\r\nbreed.ERROR // 'error'\r\nbreed.RANGEERROR // 'rangeerror'\r\nbreed.DATE // 'date'\r\nbreed.ARRAY // 'array'\r\n```\r\n\r\n### Register your own Classes\r\n```\r\nvar breed = require('breed');\r\nvar util = require('util');\r\n\r\n// your code creates some Functions\r\nfunction Person () {}\r\nfunction Child () {}\r\nfunction Mom () {}\r\nutil.inherits(Child, Person);\r\nutil.inherits(Mom, Person);\r\n\r\n// register your classes\r\nbreed.register(Person, Child, Mom);\r\n\r\n// do typechecking\r\nbreed.isPerson(new Person()) // true\r\nbreed.isChild(new Child()) // true\r\nbreed.isPerson(new Child()) // true\r\nbreed.isMom(new Mom()) // true\r\nbreed.isPerson(new Mom()) // true\r\nbreed.isntChild(new Mom()) // true\r\n\r\n// constants\r\nbreed.PERSON // 'person'\r\nbreed.CHILD // 'child'\r\nbreed.MOM // 'mom'\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/):\r\n\r\n- Available Tasks:\r\n  - jshint\r\n  - nodeunit\r\n  - default (jshint + nodeunit)\r\n\r\n\r\n## Release History\r\n\r\n- 0.2.0 Second Release\r\n   - Implement JSOn, NaN, Finite\r\n   - author breed.register()\r\n   - rename breed.get() to breed.is()\r\n\r\n\r\n* 0.1.0 Initial Release\r\n\r\n## License\r\nCopyright (c) 2013 Bastian Behrens\r\nLicensed under the MIT license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}