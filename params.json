{"name":"node-breed","tagline":"Breed is a Helper Module which makes working with types and typeof easy as easy as it should be.","body":"\r\n\r\n## Getting Started\r\nInstall the module with: `npm install breed`\r\n\r\nAnd include it in your code\r\n```\r\nvar breed = require('breed');\r\n```\r\n\r\nSo you can use it (eg. do something with any error which is not a TypeError)\r\n```\r\nif(breed.isError(e) && breed.isntTypeError(e)) {\r\n  // your code here\r\n}\r\n```\r\n\r\n## Basic Supported Types\r\n\r\n* Null\r\n* Object\r\n* Boolean\r\n* Array\r\n* Date\r\n* RegExp\r\n* Error\r\n* Number\r\n* Function\r\n* String\r\n* Undefined\r\n* JSON\r\n* Finite\r\n* NaN\r\n* Error\r\n* EvalError\r\n* InternalError\r\n* RangeError\r\n* ReferenceError\r\n* SyntaxError\r\n* TypeError\r\n* URIError\r\n\r\n## isâ€¦ and isnt...\r\n\r\nBreed always has 2 Functions for every Type\r\n\r\n```\r\nbreed.is...\r\nbreed.isnt...\r\n```\r\n\r\n### Examples\r\n```\r\nbreed.isObject({}) // true\r\nbreed.isFunction(function () {}) // true\r\nbreed.isntDate(new Date()) // false\r\nbreed.isntUndefined() // false\r\n```\r\n\r\nThere is 1 exceptional Case where isInfinite is just a little bit nicer to read than isntFinite, so both Cases are supported\r\n\r\n```\r\nbreed.isntFinite() === breed.isInfinite()\r\n```\r\n\r\n## is\r\n\r\nYou are also able to check via Breed's is-Function which will always return the type as a String\r\n\r\n### Examples\r\n```\r\nbreed.is([]) // 'array'\r\nbreed.is(1) // 'number'\r\nbreed.is({}) // 'object'\r\n...\r\n```\r\n\r\n## Constants\r\n\r\nEvery type has its 'Constant' Variable (always uppercase) whos value is always lowercase\r\n\r\n### Examples\r\n```\r\nbreed.ARRAY // 'array'\r\nbreed.NUMBER // 'number'\r\nbreed.OBJECT // 'object'\r\nbreed.REGEXP // 'regexp'\r\n\r\n// combined with the is-Function\r\nbreed.is([]) === breed.ARRAY // true\r\nbreed.is(1) === breed.NUMBER // true\r\nbreed.is({}) === breed.OBJECT // true\r\nbreed.is(/1/) === breed.REGEXP // true\r\n```\r\n\r\n## Register your own Classes\r\n\r\nJust add as much Classes as you want within 1 Register-Call\r\n\r\n```\r\nbreed.register(*functions)\r\n```\r\n\r\nThe best about that is, that breed.register even supports Inheritance!\r\n\r\n### Examples\r\n```\r\nvar breed = require('breed');\r\nvar util = require('util');\r\n\r\n// your code creates some Functions (including inheritance)\r\nfunction Person () {}\r\nfunction Child () {}\r\nfunction Mom () {}\r\nutil.inherits(Child, Person);\r\nutil.inherits(Mom, Person);\r\n\r\n// register your classes\r\nbreed.register(Person, Child, Mom);\r\n\r\n// do typechecking\r\nbreed.isPerson(new Person()) // true\r\nbreed.isChild(new Child()) // true\r\nbreed.isPerson(new Child()) // true\r\nbreed.isMom(new Mom()) // true\r\nbreed.isPerson(new Mom()) // true\r\nbreed.isntChild(new Mom()) // true\r\n\r\n// constants\r\nbreed.PERSON // 'person'\r\nbreed.CHILD // 'child'\r\nbreed.MOM // 'mom'\r\n```\r\n\r\n## License\r\nCopyright (c) 2013 Bastian Behrens\r\nLicensed under the MIT license.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}